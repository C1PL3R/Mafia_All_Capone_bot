from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.deep_linking import create_start_link
from aiogram.filters import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest
from database.database import *
import asyncio
import random

cursor.execute("UPDATE users SET cured = %s WHERE id = %s", (0, 1240754158,))
conn.commit()

cursor.execute("UPDATE users SET cured = %s WHERE id = %s", (0, 5588913711,))
conn.commit()

cursor.execute("UPDATE users SET killed = %s WHERE id = %s", (0, 1240754158,))
conn.commit()

cursor.execute("UPDATE users SET killed = %s WHERE id = %s", (0, 5588913711,))
conn.commit()

router_game = Router()

time = 0
stop = 0
action = 0

members_list = []

roles = ['–ê–ª—å –ö–∞–ø–æ–Ω–µ', '–õ—ñ–∫–∞—Ä', '–ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å']


names = []
tg_names = []

killed_text = ""

mess_nabir = ""

all_capone_list = []
doctor_list = []
peaceful_resident_list = []
patients_list = []
list_of_text = []

peaceful_list = []

list_question = []

keyboard2 = []

time_game = 0
time_day = 0

mess_kill = 0
mess_cured = 0
mess_voiting = 0

async def voting(message: Message, bot: Bot):
    global tg_names, mess_voiting, peaceful_list, doctor_list, all_capone_list, patients_list

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –±–æ—Ç–∞", url='https://t.me/Mafia_All_Capone_bot')]
    ])

    await message.answer("–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ–∑–ø–æ—á–∞—Ç–æ! –£ —Ç–µ–±–µ —î 45 —Å–µ–∫—É–Ω–¥ —â–æ–± –æ–ø—Ä–∏–¥—ñ–ª–∏—Ç—å—Å—è –∫–æ–≥–æ –≤—ñ—à–∞—Ç–∏ —ñ –ø—ñ–∑–Ω—ñ—à–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏!")

    await asyncio.sleep(45)

    await message.answer("–ü–µ—Ä–µ–π–¥–∏ –¥–æ –±–æ—Ç–∞ —ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–π, —Ç—ñ–ª—å–∫–∏ –Ω—ñ–∫–æ–º—É –Ω–µ –∫–∞–∂–∏ ü§´", reply_markup=keyboard)

    
    builder_voting = InlineKeyboardBuilder()

    for id in members_list: 
        cursor.execute("SELECT tg_name FROM users WHERE id = %s", (id,))
        name = cursor.fetchone()[0]
        cursor.execute("SELECT killed FROM users WHERE id = %s", (id,))
        killed = cursor.fetchone()[0]

        if killed == 0:
            callback_text = f"cured_{id}"
            builder_voting.add(InlineKeyboardButton(text=f"{name}", callback_data=callback_text))
            builder_voting.adjust(1, 1)
            tg_names.append(callback_text)

    if builder_voting.buttons is not None:
        for id in members_list:
            mess_voiting = await bot.send_message(chat_id=id, text="–ö–æ–≥–æ –±—É–¥–µ–º–æ –≤—ñ—à–∞—Ç–∏?", reply_markup=builder_voting.as_markup())
    else:
        for id in members_list: 
            cursor.execute("SELECT tg_name FROM users WHERE id = %s", (id,))
            name = cursor.fetchone()[0]
            cursor.execute("SELECT killed FROM users WHERE id = %s", (id,))
            killed = cursor.fetchone()[0]

            if killed == 0 and id != message.chat.id:
                callback_text = f"cured_{id}"
                builder_voting.add(InlineKeyboardButton(text=f"{name}", callback_data=callback_text))
                builder_voting.adjust(1, 1)
                tg_names.append(callback_text)
        
    for i in range(len(tg_names)):
        callback_text = tg_names[i]
        @router_game.callback_query(F.data == callback_text)
        async def cured_callback(callback: CallbackQuery, bot: Bot, callback_text=callback_text, action=action):
            global tg_names, mess_cured
            id = int(callback_text[len("cured_"):])

            action += 1
            action=action
            
            cursor.execute("SELECT tg_name FROM users WHERE id = %s", (id,))
            name = cursor.fetchone()[0]

            await callback.message.edit_text(f"–ö–æ–≥–æ –±—É–¥–µ–º–æ –≤—ñ—à–∞—Ç–∏?\n–¢–∏ –≤–∏–±—Ä–∞–≤ <a href='tg://user?id={id}'>{name}</a>", parse_mode="html")


async def day_def(message: Message):
    gif_path = "C:/Users/Hom/Desktop/Mafia_All_Capone_bot/Media/day.gif"


    with open(gif_path, 'rb') as gif_file:
        await message.answer_animation(animation=FSInputFile(path=gif_path, filename="day.gif"),
                                        caption=f"üåÑ –î–µ–Ω—å\n\n–†–∞–Ω–∫–æ–≤–∞ —Ç–∏—à–∞ –ø–æ—Ä—É—à–µ–Ω–∞ –Ω–µ –∞—Ä–æ–º–∞—Ç–æ–º –∫–∞–≤–∏, –∞...")
        
    await message.answer(f"–ñ–∞—Ö–ª–∏–≤–æ—é —Ç—Ä–∞–≥–µ–¥—ñ—î—é. –¶—ñ—î—ó –Ω–æ—á—ñ –±–µ–∑—Ü—ñ–Ω–Ω–∏–π {killed_text} –±—É–≤ –∂–æ—Ä—Å—Ç–æ–∫–æ –≤–±–∏—Ç–∏–π. –°–æ—Ä–æ–∫–∞ –Ω–∞ —Ö–≤–æ—Å—Ç—ñ –ø—Ä–∏–Ω–µ—Å–ª–∞ –∑–≤—ñ—Å—Ç–∫—É, —â–æ –≤ –Ω—å–æ–≥–æ –≤ –≥–æ—Å—Ç—è—Ö –±—É–≤ –ê–ª—å –ö–∞–ø–æ–Ω–µ.")
    players_text = "\n".join([f"{i+1}. {name}" for i, name in enumerate(names)])
    await message.answer(f'–°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:\n{players_text}', parse_mode="html") 

    await asyncio.sleep(60)
    await voting(message=message)


async def night_def(message: Message, bot: Bot, action=action):
    gif_path = "C:/Users/Hom/Desktop/Mafia_All_Capone_bot/Media/night.gif"
    with open(gif_path, 'rb') as gif_file:
        await message.answer_animation(animation=FSInputFile(path=gif_path, filename="night.gif"),
                                    caption=f"üåÉ–ù—ñ—á 1\n\n–ü—ñ–¥ –ø–æ–∫—Ä–æ–≤–æ–º –Ω–æ—á—ñ –∑–∞ —Ä–æ–≥–æ–º –ø–æ—á—É–ª–∏—Å—è –ø–æ—Å—Ç—Ä—ñ–ª–∏ —ñ –≤–∏—î —Å–∏—Ä–µ–Ω–∞ —à–≤–∏–¥–∫–æ—ó. –°–µ—Ä–∂–∞–Ω—Ç –Ω–∞–∫–∞–∑–∞–≤ —É—Å—ñ–º —Ç—ñ—Å–Ω–æ –∑–∞—á–∏–Ω–∏—Ç–∏ –¥–≤–µ—Ä—ñ. –ó–∞–ª–∏—à–∞—î–º–æ—Å—å –Ω–∞ —Å—Ç–æ—Ä–æ–∂—ñ. –©–æ –∂ –Ω–∞–º –º–æ–∂–µ –ø—Ä–∏–Ω–µ—Å—Ç–∏ —Ü–µ–π —Å–≤—ñ—Ç–∞–Ω–æ–∫....")
    
    players_text = "\n".join([f"{i+1}. {name}" for i, name in enumerate(names)])
    await message.answer(f'–°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:\n{players_text}', parse_mode="html") 

    for id in members_list:
        cursor.execute("SELECT role FROM users WHERE id = %s", (id,))
        role = cursor.fetchone()[0]

        if role == "–ê–ª—å –ö–∞–ø–æ–Ω–µ":
            await all_capone(message=message, bot=bot, id=id)
        elif role == "–õ—ñ–∫–∞—Ä":
            await doctor(message=message, bot=bot, id=id)                                            
        elif role == "–ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å":
            await peaceful_resident(message=message, bot=bot, id=id)
    await asyncio.sleep(30)
    if action < 0:
        await day_def(message=message)


async def doctor(message: Message, bot: Bot, id, action=action):
    global tg_names, mess_cured, peaceful_list, doctor_list, all_capone_list, patients_list
    builder_doctor = InlineKeyboardBuilder()

    for id in members_list: 
        cursor.execute("SELECT tg_name FROM users WHERE id = %s", (id,))
        name = cursor.fetchone()[0]
        cursor.execute("SELECT cured FROM users WHERE id = %s", (id,))
        cured = cursor.fetchone()[0]

        if cured == 0:
            callback_text = f"cured_{id}"
            builder_doctor.add(InlineKeyboardButton(text=f"{name}", callback_data=callback_text))
            builder_doctor.adjust(1, 1)
            tg_names.append(callback_text)

    if builder_doctor.buttons is not None:
        mess_cured = await bot.send_message(chat_id=doctor_list[0], text="–ö–æ–≥–æ –±—É–¥–µ–º–æ –ª—ñ–∫—É–≤–∞—Ç–∏?", reply_markup=builder_doctor.as_markup())
    else:
        for id in members_list: 
            cursor.execute("SELECT tg_name FROM users WHERE id = %s", (id,))
            name = cursor.fetchone()[0]
            cursor.execute("SELECT cured FROM users WHERE id = %s", (id,))
            cured = cursor.fetchone()[0]

            if cured == 0:
                callback_text = f"cured_{id}"
                builder_doctor.add(InlineKeyboardButton(text=f"{name}", callback_data=callback_text))
                builder_doctor.adjust(1, 1)
                tg_names.append(callback_text)
        
    for i in range(len(tg_names)):
        callback_text = tg_names[i]
        @router_game.callback_query(F.data == callback_text)
        async def cured_callback(callback: CallbackQuery, bot: Bot, callback_text=callback_text, action=action):
            global tg_names, mess_cured
            id = int(callback_text[len("cured_"):])

            action += 1
            action=action
            
            cursor.execute("SELECT tg_name FROM users WHERE id = %s", (id,))
            name = cursor.fetchone()[0]

            await callback.message.edit_text(f"–ö–æ–≥–æ –±—É–¥–µ–º–æ –ª—ñ–∫—É–≤–∞—Ç–∏?\n–¢–∏ –≤–∏–±—Ä–∞–≤ <a href='tg://user?id={id}'>{name}</a>", parse_mode="html")

            cursor.execute("UPDATE users SET cured = %s WHERE id = %s", (1, id,))
            conn.commit()
            if id == doctor_list[1]:
                await bot.send_message(chat_id=id, text="–¢–∏ –≤–∏–ª—ñ–∫—É–≤–∞–≤ —Å–µ–±–µ!")
            else:
                await bot.send_message(chat_id=id, text="–¢–µ–±–µ –≤–∏–ª—É–∫—É–≤–∞–≤ –ª—ñ–∫–∞—Ä!")


async def peaceful_resident(message: Message, bot: Bot, id, list=list_of_text):
    global list_question
    list = [("–ß–∏ –ª—é–±–∏—à —Ç–∏ –ø–∏—Ç–∏ –∫–∞–≤—É –∑—Ä–∞–Ω–∫—É?", "–¢–∞–∫", "–ù—ñ"), ("–ß–∏ –≤–º—ñ—î—à —Ç–∏ –≥–æ—Ç—É–≤–∞—Ç–∏ —è—î—á–Ω—é?", "–¢–∞–∫", "–ù—ñ"), ("–¢–∏ –≤—ñ–¥–¥–∞—î—à –ø–µ—Ä–µ–≤–∞–≥—É –ø–µ—Ä–µ–≥–ª—è–¥—É —Ñ—ñ–ª—å–º—ñ–≤ –≤–¥–æ–º–∞, —á–∏ –∫—ñ–Ω–æ—Ç–µ–∞—Ç—Ä—ñ?", "–í–¥–æ–º–∞", "–í –∫—ñ–Ω–æ—Ç–µ–∞—Ç—Ä—ñ"),
            ("–¢–∏ –ø–æ–ª—é–±–ª—è—î—à –≤–µ—á—ñ—Ä–Ω—ñ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏?", "–¢–∞–∫", "–ù—ñ"), ("–¢–∏ –∑–∞ –ø–∞–ø–µ—Ä–æ–≤—ñ —á–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –∫–Ω–∏–≥–∏?", "–ü–∞–ø–µ—Ä–æ–≤—ñ", "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ"), ("–¢–∏ —Å–ª—É—Ö–∞—î—à –ø–æ–¥–∫–∞—Å—Ç–∏?", "–¢–∞–∫", "–ù—ñ"), ("–¢–∏ –º–∞—î—à —É–ª—é–±–ª–µ–Ω—É –º—É–∑–∏—á–Ω—É –≥—Ä—É–ø—É, —á–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤?", "–¢–∞–∫", "–ù—ñ"),
            ("–ß–∏ —á–∞—Å—Ç–æ —Ç–∏ –≤—ñ–¥–≤—ñ–¥—É—î—à –º—É–∑–µ—ó/–≤–∏—Å—Ç–∞–≤–∫–∏?", "–¢–∞–∫", "–ù—ñ"), ("–£ —Ç–µ–±–µ —î –¥–æ–º–∞—à–Ω—ñ —É–ª—é–±–ª–µ–Ω—Ü—ñ?", "–¢–∞–∫", "–ù—ñ"), ("–õ—é–±–∏—à –ø–æ–¥–æ—Ä–æ–∂—ñ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ñ?", "–¢–∞–∫", "–ù—ñ")]
    list_question = random.choice(list)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=list_question[1], callback_data="answer_1"), InlineKeyboardButton(text=list_question[2], callback_data="answer_2")]
    ])
    mess = await bot.send_message(chat_id=id, text=f"{list_question[0]}", reply_markup=keyboard)
    mess = mess


async def all_capone(message: Message, bot: Bot, id, action=action, killed_text=killed_text):
    global tg_names, mess_kill, peaceful_list, all_capone_list
    builder_all_capone = InlineKeyboardBuilder()
    for id in members_list: 
        cursor.execute("SELECT tg_name FROM users WHERE id = %s", (id,))
        name = cursor.fetchone()[0]
        cursor.execute("SELECT killed FROM users WHERE id = %s", (id,))
        killed = cursor.fetchone()[0]

        if id in peaceful_list and id != int(all_capone_list[0]) and killed != 1:
            callback_text = f"killed_{id}"
            builder_all_capone.add(InlineKeyboardButton(text=f"{name}", callback_data=callback_text))
            builder_all_capone.adjust(1, 1)
            tg_names.append(callback_text)
    if builder_all_capone.buttons:
        mess_kill = await bot.send_message(chat_id=all_capone_list[0], text="–ö–æ–≥–æ –±—É–¥–µ–º–æ –≤–±–∏–≤–∞—Ç–∏?", reply_markup=builder_all_capone.as_markup())
    else:
        for id in members_list: 
            cursor.execute("SELECT tg_name FROM users WHERE id = %s", (id,))
            name = cursor.fetchone()[0]
            cursor.execute("SELECT killed FROM users WHERE id = %s", (id,))
            killed = cursor.fetchone()[0]

            if id in peaceful_list and id != int(all_capone_list[0]) and killed != 1:
                callback_text = f"killed_{id}"
                builder_all_capone.add(InlineKeyboardButton(text=f"{name}", callback_data=callback_text))
                builder_all_capone.adjust(1, 1)
                tg_names.append(callback_text)

    for i in range(len(tg_names)):
        callback_text = tg_names[i]
        @router_game.callback_query(F.data == callback_text)
        async def kill_callback(callback: CallbackQuery, bot: Bot, callback_text=callback_text, killed_text=killed_text, killed_times=0):
            global tg_names, mess_kill, names
            if killed_times == 0:
                id = int(callback_text[len("killed_"):])

                cursor.execute("SELECT cured FROM users WHERE id = %s", (id,))
                cured = cursor.fetchone()[0]
                if cured == 0:
                    cursor.execute("SELECT tg_name FROM users WHERE id = %s", (id,))
                    name = cursor.fetchone()[0]

                    await callback.message.edit_text(f"–ö–æ–≥–æ –±—É–¥–µ–º–æ –≤–±–∏–≤–∞—Ç–∏?\n–¢–∏ –≤–∏–±—Ä–∞–≤ <a href='tg://user?id={id}'>{name}</a>", parse_mode="html")

                    cursor.execute("UPDATE users SET killed = %s WHERE id = %s", (1, id,))
                    conn.commit()
                    await bot.send_message(chat_id=id, text="–¢–µ–±–µ –≤–±–∏–ª–∏!")

                    cursor.execute("SELECT role FROM users WHERE id = %s", (id,))
                    role = cursor.fetchone()[0]

                    killed_text = f"{name} {role}"
                    killed_text = killed_text

                    members_list.remove(id)
                    peaceful_list.remove(id)
                    tg_names.remove(callback_text)
                    #names.remove(name)
                    day += 1
                    day=day
                else:
                    await bot.send_message(chat_id=id, text="–¢–µ–±–µ –≤—Ä—è—Ç—É–≤–∞–ª–∏ –±–∏–Ω—Ç–∏ —Ç–∞ —Å–∫–∞–ª—å–ø–µ–ª—å.")
            else:
                pass








@router_game.message(Command("game"))
async def start_cmd(message: Message, bot: Bot, time_game=time_game, members_list=members_list,
                    roles=roles):
    if message.chat.type == "supergroup" or message.chat.type == "group":
        global all_capone_list, doctor_list, peaceful_resident_list, keyboard, peaceful_list, mess_nabir, names
        MN = 4
        time_game = 0
        roles = ['–ê–ª—å –ö–∞–ø–æ–Ω–µ', '–õ—ñ–∫–∞—Ä', '–ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å']

        mess1 = ""
        mess2 = ""
        try:
            await message.delete()

            link = await create_start_link(bot, f'{message.chat.id}', encode=False)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏!", url=link)]
            ])
            
            mess_nabir = await message.answer("–ù–∞–±—ñ—Ä –¥–æ –≥—Ä–∏!", reply_markup=keyboard)
            await bot.pin_chat_message(chat_id=message.chat.id, message_id=mess_nabir.message_id)
            
            while True:
                await asyncio.sleep(1)
                time_game += 1
                print(time_game)
                if time_game == 120:
                    if len(members_list) < MN:
                        await message.answer(text="<b>–¢–∞–π–º–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è! –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞</b>", parse_mode="html")
                    else:
                        await message.answer(text="<b>–ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!</b>", parse_mode="html")
                        game = True
                    break
                elif time_game == 60:
                    mess1 = await mess_nabir.reply(text="–ü—Ä–æ–π—à–ª–∞ —Ö–≤–∏–ª–∏–Ω–∞ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É! –ü—ñ—Å–ª—è 2 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è!")
                    mess1 = mess1
                elif time_game == 30:
                    mess2 = await mess_nabir.reply(text="–ü—Ä–æ–π—à–ª–æ 30 —Å–µ–∫—É–Ω–¥ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É! –ü—ñ—Å–ª—è 2 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è!")
                    mess2 = mess2
                elif stop == 1:
                    break
                
                if time_game % 10 == 0:
                    await mess_nabir.edit_text(text=f"–ù–∞–±—ñ—Ä –¥–æ –≥—Ä–∏!\n–ì—Ä–∞–≤—Ü—ñ:\n<b>{', '.join(names)}</b>\n\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞—Ü—ñ–≤: {len(members_list)}\n\n–ß–∞—Å: {time_game}—Å.", parse_mode="html", reply_markup=keyboard)


        except TelegramBadRequest as ex:
            await message.answer(text=f"–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —É—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞!")
        
        list = [mess_nabir, mess1, mess2]
        try:
            for message_to_delete in list:
                await message_to_delete.delete()
        except AttributeError:
            pass

        
        if len(members_list) >= MN:  
            #–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è –≥—Ä–∞!
            for id in members_list:
                random_role = random.choice(roles)
                if random_role == roles[0] or random_role == roles[1]:
                    roles.remove(random_role)
                else:
                    pass
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
                cursor.execute("UPDATE users SET role = %s WHERE id = %s", (random_role, id,))
                conn.commit()

                cursor.execute("SELECT role FROM users WHERE id = %s", (id,))
                role = cursor.fetchone()[0]

                if role == "–ê–ª—å –ö–∞–ø–æ–Ω–µ":
                    all_capone_list.append(id)
                    patients_list.append(id)
                    await bot.send_message(chat_id=id, text="–¶—ñ—î—ó –≥—Ä–∏ —Ç–∏ - –ê–ª—å –ö–∞–ø–æ–Ω–µ!\n–†–æ–±–∏ –≤—Å–µ, —â–æ–± —Ç–≤–æ—è —Å—ñ–º'—è –æ—Ç—Ä–∏–º–∞–ª–∞ –ø–µ—Ä–µ–º–æ–≥—É, –Ω–∞–¥ —Ü–∏–º–∏ –Ω—ñ–∫—á–µ–º–Ω–∏–º–∏ –º–∏—Ä–Ω–∏–º–∏ –∂–∏—Ç–µ–ª—è–º–∏.")
                elif role == "–õ—ñ–∫–∞—Ä":
                    doctor_list.append(id)
                    peaceful_list.append(id)
                    await bot.send_message(chat_id=id, text="–¶—ñ—î—ó –≥—Ä–∏ —Ç–∏ - –õ—ñ–∫–∞—Ä!\n–†–æ–±–∏ –≤—Å–µ, —â–æ–± –≤—Ä—è—Ç—É–≤–∞—Ç–∏ —è–∫–æ–º–æ–≥–∞ –±—ñ–ª—å—à–µ –º–∏—Ä–Ω–∏—Ö –ª—é–¥–µ–π.")
                elif role == "–ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å":
                    peaceful_list.append(id)
                    patients_list.append(id)
                    await bot.send_message(chat_id=id, text="–¶—ñ—î—ó –≥—Ä–∏ —Ç–∏ - –ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å!\n–†–æ–±–∏ –≤—Å–µ, —â–æ–± –∑–Ω–∏—â–∏—Ç–∏ –ø—ñ–¥—Å—Ç—É–ø–Ω–µ —É–≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –ê–ª—å –ö–∞–ø–æ–Ω–µ.")

                
                await night_def(bot=bot, message=message)

    else:
        await message.answer(text="–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —É –≥—Ä—É–ø–∞—Ö!")



@router_game.message(CommandStart(deep_link=True))
async def start_cmd_link(message: Message, bot: Bot, names=names):
    global mess_nabir
    if len(members_list) > 4:
        await message.answer("–£—á–∞—Å–Ω–∏–∫—ñ–≤ –º–æ–∂–µ –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ 4!")
    if message.from_user.id in members_list:
        await message.answer(text="–¢–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è!")
    else:
        await message.answer(f"–¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!")

        members_list.append(message.from_user.id)
        names.append(message.from_user.mention_html())

        link = await create_start_link(bot, 'foo', encode=True)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏!", url=link)]
        ])

        await mess_nabir.edit_text(text=f"–ù–∞–±—ñ—Ä –¥–æ –≥—Ä–∏!\n–ì—Ä–∞–≤—Ü—ñ:\n<b>{', '.join(names)}</b>\n\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞—Ü—ñ–≤: {len(members_list)}", parse_mode="html", reply_markup=keyboard)



@router_game.message(Command("leave_game"))
async def stop_game_cmd(message: Message, bot: Bot):
    global members_list, names

    members_list.remove(message.from_user.id)
    names.remove(message.from_user.mention_html())

    await bot.send_message(chat_id=message.from_user.id, text="–¢–∏ –ø–æ–∫–∏–Ω—É–≤ –≥—Ä—É!")

