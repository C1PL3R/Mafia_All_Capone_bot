from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.types import Message, ChatMemberOwner
from database.database import *

router_construct_event = Router()

isInputChatId = True
isInputCreatorId = True
CreatorId = 0
ChatId = 0

async def loggingIn(message: Message):
    global isInputChatId, isInputCreatorId, ChatId, CreatorId
    isInputCreatorId = True

    await message.answer("–¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —è–∫ —Ç–æ–π —Ö—Ç–æ —è–≤–ª—è—î—Ç—å—Å—è —Ç–∏–º —Ö—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ —á–∞—Ç. –†–æ–∑–ø–æ—á–Ω—ñ–º–æ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–Ω–Ω—è. –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î id (–°–≤–æ—î id –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ —É –ø—Ä–∏–≤–∞—Ç –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—É /id)", parse_mode="html")

    @router_construct_event.message(lambda message: isInputCreatorId)
    async def isInputCreatorIdAsyncDef(message: Message):
        if message.chat.type == "private":
            try:
                global isInputChatId, isInputCreatorId, ChatId, CreatorId
                CreatorId = int(message.text)

                await message.answer(text="–î—è–∫—É—é ‚ù§Ô∏è\n–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –∞–π–¥—ñ –≥—Ä—É–ø–∏ —è–∫—É <u><b>—Ç–∏ —Å—Ç–≤–æ—Ä–∏–≤</b></u> –∞–¥–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —ñ–≤–µ–Ω—Ç –º–æ–∂–µ <u><b>—Ç—ñ–ª—å–∫–∏ –ª—é–¥–∏–Ω–∞ —è–∫–∞ —Å—Ç–≤–æ—Ä–∏–ª–∞ –≥—Ä—É–ø—É</b></u> üôÇ\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è id –≥—Ä—É–ø–∏ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /id —É –≥—Ä—É–ø—É —è–∫—É <u><b>—Ç–∏ —Å—Ç–≤–æ—Ä–∏–≤</b></u>")

                isInputCreatorId = False
                isInputChatId = True

                @router_construct_event.message(lambda message: isInputChatId)
                async def isInputChatIdAsyncDef(message: Message, bot: Bot):
                    if message.chat.id == "private":
                        try:
                            YouIsCreator = False
                            global isInputChatId, ChatId, CreatorId
                            ChatId = int(message.text)
                            if ChatId > 0:
                                await message.answer("–í—ñ–¥–ø—Ä–∞–≤ –∞–π–¥—ñ –≥—Ä—É–ø–∏ (–≤–æ–Ω–æ –∑ –º—ñ–Ω—É—Å–æ–º)")
                            else:
                                administrators = await bot.get_chat_administrators(ChatId)

                                isInputChatId = False

                                for admin in administrators:
                                    if isinstance(admin, ChatMemberOwner) and admin.user.id == CreatorId:
                                        YouIsCreator = True
                                        
                                if YouIsCreator:
                                    cursor.execute("UPDATE creator_id = ?, group_id = ?", (message.from_user.id,))
                                    conn.commit()
                                    await message.answer("–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /construct_event —â–µ —Ä–∞–∑!")
                                else:
                                    await message.answer("–í–∏ –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞–ª–∏ —Ü—é –≥—Ä—É–ø—É.")
                                    ChatId = 0
                                    CreatorId = 0

                        except Exception:
                            await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ç—ñ–ª—å–∫–∏ id –≥—Ä—É–ø–∏ —è–∫—É <u><b>—Ç–∏ —Å—Ç–≤–æ—Ä–∏–≤</b></u> –±–µ–∑ –±—É–∫–≤, —Å–∞–º—ñ —Ü–∏—Ñ—Ä–∏", parse_mode="html")

            except Exception:
                isInputChatId = False
                isInputCreatorId = False
                await message.answer(text="–ù–∞–¥—ñ—à–ª–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—î id –±–µ–∑ –±—É–∫–≤, —Å–∞–º—ñ —Ü–∏—Ñ—Ä–∏")

@router_construct_event.message(Command("construct_event"))
async def order(message: Message):
    if message.chat.type == "private":
        cursor.execute("SELECT creator_id FROM admin_panel")
        creatorIds = cursor.fetchall()
        if message.from_user.id in creatorIds:
            await message.answer("–¢–∏ –≤ –±–∞–∑—ñ)")
        else:
            await loggingIn(message)

        