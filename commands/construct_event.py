import asyncio
from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.enums import ChatMemberStatus
from aiogram.types import Message, ChatMemberOwner, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from database.database import cursor, conn

router_construct_event = Router()

is_input_chat_id = False
is_input_add_chat_id = False
is_input_creator_id = False
is_input_name_of_role = False
is_input_description_of_role = False
creator_id = 0
chat_id = 0
name_of_chats = []
name_of_add_chats = []
group_id = 0

@router_construct_event.message(Command("construct_event"))
async def construct_event_handler(message: Message, bot: Bot):
    global name_of_chats
    if message.chat.type == "private":
        cursor.execute("SELECT creator_id FROM admin_panel")
        creator_ids = [row[0] for row in cursor.fetchall()]

        if message.from_user.id in creator_ids:
            cursor.execute("SELECT group_id FROM admin_panel WHERE creator_id = %s", (message.from_user.id,))
            group_ids = cursor.fetchall()

            list_of_chats = InlineKeyboardBuilder()

            for chat_id in group_ids:
                chat = await bot.get_chat(chat_id=int(chat_id[0]))

                list_of_chats.button(text=f"{chat.title}", callback_data=chat.title)

                name_of_chats.append((chat_id, chat.title))
                
                list_of_chats.adjust(1)

            await message.answer("–í–∏–±–µ—Ä–∏ —á–∞—Ç –¥–µ –±—É–¥–µ—à –±—É–¥—É–≤–∞—Ç–∏ —ñ–≤–µ–Ω—Ç", reply_markup=list_of_chats.as_markup())

        else:
            global is_input_chat_id

            await message.answer("–¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —è–∫ –≤–ª–∞—Å–Ω–∏–∫ —á–∞—Ç—É. –†–æ–∑–ø–æ—á–Ω—ñ–º–æ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–Ω–Ω—è.\n–ù–∞–¥—ñ—à–ª–∏ –∞–π–¥—ñ –≥—Ä—É–ø–∏ —è–∫—É <u><b>—Ç–∏ —Å—Ç–≤–æ—Ä–∏–≤</b></u> –∞–¥–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —ñ–≤–µ–Ω—Ç –º–æ–∂–µ <u><b>—Ç—ñ–ª—å–∫–∏ –ª—é–¥–∏–Ω–∞ —è–∫–∞ —Å—Ç–≤–æ—Ä–∏–ª–∞ –≥—Ä—É–ø—É</b></u> üôÇ\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è id –≥—Ä—É–ø–∏ –Ω–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /id —É –≥—Ä—É–ø—É —è–∫—É <u><b>—Ç–∏ —Å—Ç–≤–æ—Ä–∏–≤</b></u>", parse_mode="html")
            
            is_input_chat_id = True
        
        for id, title in name_of_chats:
            @router_construct_event.callback_query(F.data == title)
            async def titleChatCallback(callback: CallbackQuery):
                global group_id
                doctor_button = InlineKeyboardButton(text="–õ—ñ–∫–∞—Ä", callback_data="doctor")
                all_capone_button = InlineKeyboardButton(text="–ê–ª—å –ö–∞–ø–æ–Ω–µ", callback_data="all_capone")
                civilian_button = InlineKeyboardButton(text="–ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å", callback_data="civilian")
                add_group_button = InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É ‚ûï", callback_data="add_group")
                delete_group_button = InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É ‚ùå", callback_data="delete_group")
                default_settings_button = InlineKeyboardButton(text="–°–∫–∏–Ω—É—Ç–∏ –≤—Å–µ!", callback_data="default")

                roles_buttons = InlineKeyboardMarkup(inline_keyboard=[
                    [doctor_button],
                    [all_capone_button],
                    [civilian_button],
                    [add_group_button],
                    [delete_group_button],
                    [default_settings_button]
                ])
                group_id = id
                await callback.message.edit_text("‚¨áÔ∏è –í–∏–±–µ—Ä–∏ —è–∫—É —Ä–æ–ª—å —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ ‚¨áÔ∏è", reply_markup=roles_buttons)


@router_construct_event.message(lambda message: is_input_chat_id)
async def is_input_chat_id_handler(message: Message, bot: Bot):
    if message.chat.type == "private":
        try:
            try:
                global is_input_chat_id, chat_id, creator_id
                chat_id = int(message.text)

                if chat_id >= 0:
                    await message.answer("–í—ñ–¥–ø—Ä–∞–≤ –∞–π–¥—ñ –≥—Ä—É–ø–∏ (–≤–æ–Ω–æ –∑–∞–≤–∂–¥–∏ –∑ –º—ñ–Ω—É—Å–æ–º)")
                elif chat_id < 0:
                    chat_member = await bot.get_chat_member(chat_id, message.from_user.id)

                    status = chat_member.status

                    if status == ChatMemberStatus.CREATOR:
                        cursor.execute("INSERT INTO admin_panel (creator_id, group_id) VALUES (%s, %s)", (message.from_user.id, chat_id))
                        conn.commit()

                        chat = await bot.get_chat(chat_id=chat_id)

                        await message.answer(f"–¢–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —è–∫ –≤–ª–∞—Å–Ω–∏–∫ –≥—Ä—É–ø–∏: <u><b>{chat.title}</b></u>\n–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /construct_event —â–µ —Ä–∞–∑!", parse_mode="html")
                        is_input_chat_id = False
                    else:
                        await message.answer("–¢–∏ –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º —Ü—ñ—î—ó –≥—Ä—É–ø–∏.")
                        chat_id = 0
                        creator_id = 0
                        is_input_chat_id = False

            except TelegramBadRequest as e:
                await message.answer(f"–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ —ñ—Å–Ω—É—î!\n<b>{e}</b>", parse_mode="html")
        except ValueError:
            await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ç—ñ–ª—å–∫–∏ id –≥—Ä—É–ø–∏ —è–∫—É <u><b>—Ç–∏ —Å—Ç–≤–æ—Ä–∏–≤</b></u> –±–µ–∑ –±—É–∫–≤, —Å–∞–º—ñ —Ü–∏—Ñ—Ä–∏", parse_mode="html")


async def change_name_of_role(callback: CallbackQuery, name_of_role, role_in_db, chat_id):
    cursor.execute(f"SELECT {role_in_db} FROM admin_panel WHERE creator_id = %s AND group_id = %s", (callback.from_user.id, chat_id))
    role = cursor.fetchone()

    cursor.execute(f"SELECT {role_in_db}_text FROM admin_panel WHERE creator_id = %s AND group_id = %s", (callback.from_user.id, chat_id))
    text_of_role = cursor.fetchone()

    go_to_main_menu_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="go_to_main_menu")
    name_of_role_button = InlineKeyboardButton(text="–ù–∞–∑–≤—É —Ä–æ–ª—ñ", callback_data="name_of_role")
    description_of_role_button = InlineKeyboardButton(text="–û–ø–∏—Å —Ä–æ–ª—ñ", callback_data="description_of_role")

    control_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [name_of_role_button],
        [description_of_role_button],
        [go_to_main_menu_button]
    ])

    await callback.message.edit_text(text=f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ —Ä–æ–ª—ñ ¬´{name_of_role}¬ª: <b><u>{role[0]}</u></b>\n–ü–æ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å —Ä–æ–ª—ñ ¬´{name_of_role}¬ª: <b><u>{text_of_role[0]}</u></b>\n\n–ë–æ—Ç –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ–ª—ñ —Ç–∞ —ó—ó –æ–ø–∏—Å –±–µ–∑ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç—É —Ç–∞ –±–µ–∑ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è.\n\n‚¨áÔ∏è–í–∏–±–µ—Ä—ñ—Ç—å —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏‚¨áÔ∏è", 
                                    reply_markup=control_keyboard, 
                                    parse_mode="html")

    @router_construct_event.callback_query(F.data == "name_of_role")
    async def name_of_role_callback_query(callback: CallbackQuery):
        global is_input_name_of_role
        go_to_role_menu_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="go_to_role_menu")

        control_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [go_to_role_menu_button]
        ])
        await callback.message.edit_text(f"–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è —Ä–æ–ª—ñ ¬´{name_of_role}¬ª", reply_markup=control_keyboard)

        is_input_name_of_role = True


    @router_construct_event.callback_query(F.data == "description_of_role")
    async def name_of_role_callback_query(callback: CallbackQuery):
        global is_input_description_of_role
        go_to_role_menu_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="go_to_role_menu")

        control_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [go_to_role_menu_button]
        ])
        await callback.message.edit_text(f"–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –Ω–æ–≤–∏–π –æ–ø–∏—Å –¥–ª—è —Ä–æ–ª—ñ ¬´{name_of_role}¬ª", reply_markup=control_keyboard)

        is_input_description_of_role = True


    @router_construct_event.message(lambda message: is_input_name_of_role)
    async def is_input_name_of_role_cmd(message: Message):
        global is_input_name_of_role
        cursor.execute(f"UPDATE admin_panel SET {role_in_db} = %s WHERE creator_id = %s AND group_id = %s", (message.text, message.from_user.id, chat_id))
        conn.commit()

        success_message = await message.answer(f"–ù–∞–∑–≤—É —Ä–æ–ª—ñ ¬´{name_of_role}¬ª –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: <u><b>{message.text}</b></u>", parse_mode="html")
        is_input_name_of_role = False

        await asyncio.sleep(7)

        await success_message.delete()
        await message.delete()


    @router_construct_event.message(lambda message: is_input_description_of_role)
    async def is_input_name_of_role_cmd(message: Message):
        global is_input_description_of_role
        cursor.execute(f"UPDATE admin_panel SET {role_in_db}_text = %s WHERE creator_id = %s AND group_id = %s", (message.text, message.from_user.id, chat_id))
        conn.commit()

        success_message = await message.answer(f"–û–ø–∏—Å —Ä–æ–ª—ñ ¬´{name_of_role}¬ª –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: <u><b>{message.text}</b></u>", parse_mode="html")
        is_input_description_of_role = False

        await asyncio.sleep(7)

        await success_message.delete()
        await message.delete()


    @router_construct_event.callback_query(F.data == "go_to_role_menu")
    async def go_to_main_menu_callback_query(callback: CallbackQuery):
        global is_input_name_of_role
        is_input_name_of_role = False

        cursor.execute(f"SELECT {role_in_db} FROM admin_panel WHERE creator_id = %s AND group_id = %s", (callback.from_user.id, chat_id))
        role = cursor.fetchone()

        cursor.execute(f"SELECT {role_in_db}_text FROM admin_panel WHERE creator_id = %s AND group_id = %s", (callback.from_user.id, chat_id))
        text_of_role = cursor.fetchone()

        go_to_main_menu_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="go_to_main_menu")
        name_of_role_button = InlineKeyboardButton(text="–ù–∞–∑–≤—É —Ä–æ–ª—ñ", callback_data="name_of_role")
        description_of_role_button = InlineKeyboardButton(text="–û–ø–∏—Å —Ä–æ–ª—ñ", callback_data="description_of_role")

        control_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [name_of_role_button],
            [description_of_role_button],
            [go_to_main_menu_button]
        ])

        await callback.message.edit_text(text=f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ —Ä–æ–ª—ñ ¬´{name_of_role}¬ª: <b><u>{role[0]}</u></b>\n–ü–æ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å —Ä–æ–ª—ñ ¬´{name_of_role}¬ª: <b><u>{text_of_role[0]}</u></b>\n\n–ë–æ—Ç –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ–ª—ñ —Ç–∞ —ó—ó –æ–ø–∏—Å –±–µ–∑ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç—É —Ç–∞ –±–µ–∑ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è.\n\n‚¨áÔ∏è–í–∏–±–µ—Ä—ñ—Ç—å —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏‚¨áÔ∏è", 
                                        reply_markup=control_keyboard, 
                                        parse_mode="html")


@router_construct_event.callback_query(F.data == "doctor")
async def doctor_callback_query(callback: CallbackQuery):
    global group_id
    await change_name_of_role(callback=callback, name_of_role="–õ—ñ–∫–∞—Ä", role_in_db="doctor", chat_id=group_id)


@router_construct_event.callback_query(F.data == "all_capone")
async def doctor_callback_query(callback: CallbackQuery):
    global group_id
    await change_name_of_role(callback=callback, name_of_role="–ê–ª—å –ö–∞–ø–æ–Ω–µ", role_in_db="all_capone", chat_id=group_id)


@router_construct_event.callback_query(F.data == "civilian")
async def doctor_callback_query(callback: CallbackQuery):
    global group_id
    await change_name_of_role(callback=callback, name_of_role="–ú–∏—Ä–Ω–∏–π –ñ–∏—Ç–µ–ª—å", role_in_db="civilian", chat_id=group_id)


@router_construct_event.callback_query(F.data == "go_to_main_menu")
async def go_to_main_menu_callback_query(callback: CallbackQuery):
    doctor_button = InlineKeyboardButton(text="–õ—ñ–∫–∞—Ä", callback_data="doctor")
    all_capone_button = InlineKeyboardButton(text="–ê–ª—å –ö–∞–ø–æ–Ω–µ", callback_data="all_capone")
    civilian_button = InlineKeyboardButton(text="–ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å", callback_data="civilian")
    add_group_button = InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É ‚ûï", callback_data="add")
    delete_group_button = InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É ‚ùå", callback_data="delete")

    roles_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [doctor_button],
        [all_capone_button],
        [civilian_button],
        [add_group_button],
        [delete_group_button]
    ])

    await callback.message.edit_text("‚¨áÔ∏è –í–∏–±–µ—Ä–∏ —è–∫—É —Ä–æ–ª—å —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ ‚¨áÔ∏è", reply_markup=roles_buttons)


@router_construct_event.callback_query(F.data == "add_group")
async def add_group(callback: CallbackQuery):
    global is_input_add_chat_id

    await callback.message.edit_text("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∞–π–¥—ñ –≥—Ä—É–ø–∏ –≤ —è–∫—ñ–π <u><b>—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫</b></u>", parse_mode="html")

    is_input_add_chat_id = True


@router_construct_event.message(lambda message: is_input_add_chat_id)
async def IsInputAddChatId(message: Message, bot: Bot):
    global is_input_add_chat_id
    try:
        chat_id = int(message.text)

        cursor.execute("SELECT group_id FROM admin_panel")
        group_ids = [row[0] for row in cursor.fetchall()]

        if chat_id in group_ids:
            await message.answer("–¶–µ id –≥—Ä—É–ø–∏ –≤–∂–µ —î –≤ –±–∞–∑—ñ, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–µ")
        else:
            chat_member = await bot.get_chat_member(chat_id, message.from_user.id)

            status = chat_member.status

            if status == ChatMemberStatus.CREATOR:
                cursor.execute("INSERT INTO admin_panel (creator_id, group_id) VALUES (%s, %s)", (message.from_user.id, chat_id))
                conn.commit()

                chat = await bot.get_chat(chat_id=chat_id)

                await message.answer(f"–¢–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —è–∫ –≤–ª–∞—Å–Ω–∏–∫ –≥—Ä—É–ø–∏: {chat.title}\n–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /construct_event —â–µ —Ä–∞–∑!")

                is_input_add_chat_id = False
            else:
                await message.answer("–¢–∏ –Ω–µ —î –≤–ª–∞—Å–Ω–∏–∫–æ–º –≥—Ä—É–ø–∏!")
                is_input_add_chat_id = False

    except ValueError:
        await message.answer("–ù–∞–ø–∏—à–∏ –∞–π–¥—ñ –≥—Ä—É–ø–∏ –≤–æ–Ω–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —Ü–∏—Ñ—Ä –±–µ–∑ –±—É–∫–≤")


@router_construct_event.callback_query(F.data == "delete_group")
async def delete_group(callback: CallbackQuery):
    yes_button = InlineKeyboardButton(text="–¢–∞–∫", callback_data="yes")
    no_button = InlineKeyboardButton(text="–ù—ñ", callback_data="no")

    yes_or_no_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [yes_button],
        [no_button]
    ])

    await callback.message.edit_text("–¢–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É?", reply_markup=yes_or_no_buttons)


@router_construct_event.callback_query(F.data == "yes")
async def yes_callback(callback: CallbackQuery, bot: Bot):
    name_of_add_chats = []
    cursor.execute("SELECT group_id FROM admin_panel WHERE creator_id = %s", (callback.from_user.id,))
    group_ids = cursor.fetchall()[0]

    list_of_chats = InlineKeyboardBuilder()

    for chat_id in group_ids:
        print(group_ids)
        chat = await bot.get_chat(chat_id=int(chat_id))

        list_of_chats.button(text=f"{chat.title}", callback_data=f"{chat.title}_delete")
        
        list_of_chats.adjust(1)

        name_of_add_chats.append((chat_id, chat.title))

    print("1:", name_of_add_chats)

    await callback.message.edit_text("–í–∏–±–µ—Ä–∏ —á–∞—Ç —è–∫–∏–π –≤–∏–¥–∞–ª–∏—à –∑—ñ —Å–ø–∏—Å–∫—É", reply_markup=list_of_chats.as_markup())
    
    for id, title in name_of_add_chats:
        @router_construct_event.callback_query(F.data == f"{title}_delete")
        async def delete_chat(callback: CallbackQuery):
            global name_of_add_chats

            print("2:", name_of_add_chats)

            cursor.execute("DELETE FROM admin_panel WHERE creator_id = %s AND group_id = %s", (callback.from_user.id, id))
            conn.commit()

            await callback.message.edit_text(f"–ß–∞—Ç {title} –≤–∏–¥–∞–ª–µ–Ω–æ! –í–∏ –±—É–¥—å-–∫–æ–ª–∏ –∑–º–æ–∂–µ—Ç–µ –π–æ–≥–æ –¥–æ–¥–∞—Ç–∏")

            name_of_add_chats.remove((id, title))


@router_construct_event.callback_query(F.data == "no")
async def no_callback(callback: CallbackQuery, bot: Bot):
    cursor.execute("SELECT group_id FROM admin_panel WHERE creator_id = %s", (callback.from_user.id,))
    group_ids = cursor.fetchall()

    list_of_chats = InlineKeyboardBuilder()

    for chat_id in group_ids:
        chat = await bot.get_chat(chat_id=int(chat_id[0]))

        list_of_chats.button(text=f"{chat.title}", callback_data=chat.title)
        
        list_of_chats.adjust(1)

    await callback.message.edit_text("–í–∏–±–µ—Ä–∏ —á–∞—Ç –¥–µ –±—É–¥–µ—à –±—É–¥—É–≤–∞—Ç–∏ —ñ–≤–µ–Ω—Ç", reply_markup=list_of_chats.as_markup())


@router_construct_event.callback_query(F.data == "default")
async def default_settings(callback: CallbackQuery):
    list = [("–ß–∏ –ª—é–±–∏—à —Ç–∏ –ø–∏—Ç–∏ –∫–∞–≤—É –∑—Ä–∞–Ω–∫—É?", "question_for_civilian_1", "–¢–∞–∫", "–ù—ñ"), 
            ("–ß–∏ –≤–º—ñ—î—à —Ç–∏ –≥–æ—Ç—É–≤–∞—Ç–∏ —è—î—á–Ω—é?", "question_for_civilian_2", "–¢–∞–∫", "–ù—ñ"), 
            ("–¢–∏ –≤—ñ–¥–¥–∞—î—à –ø–µ—Ä–µ–≤–∞–≥—É –ø–µ—Ä–µ–≥–ª—è–¥—É —Ñ—ñ–ª—å–º—ñ–≤ –≤–¥–æ–º–∞, —á–∏ –∫—ñ–Ω–æ—Ç–µ–∞—Ç—Ä—ñ?", "question_for_civilian_3", "–í–¥–æ–º–∞", "–í –∫—ñ–Ω–æ—Ç–µ–∞—Ç—Ä—ñ"),
            ("–¢–∏ –ø–æ–ª—é–±–ª—è—î—à –≤–µ—á—ñ—Ä–Ω—ñ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏?", "question_for_civilian_4", "–¢–∞–∫", "–ù—ñ"), 
            ("–¢–∏ –∑–∞ –ø–∞–ø–µ—Ä–æ–≤—ñ —á–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –∫–Ω–∏–≥–∏?", "question_for_civilian_5", "–ü–∞–ø–µ—Ä–æ–≤—ñ", "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ"), 
            ("–¢–∏ —Å–ª—É—Ö–∞—î—à –ø–æ–¥–∫–∞—Å—Ç–∏?", "question_for_civilian_6", "–¢–∞–∫", "–ù—ñ"), 
            ("–¢–∏ –º–∞—î—à —É–ª—é–±–ª–µ–Ω—É –º—É–∑–∏—á–Ω—É –≥—Ä—É–ø—É, —á–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤?", "question_for_civilian_7", "–¢–∞–∫", "–ù—ñ"),
            ("–ß–∏ —á–∞—Å—Ç–æ —Ç–∏ –≤—ñ–¥–≤—ñ–¥—É—î—à –º—É–∑–µ—ó/–≤–∏—Å—Ç–∞–≤–∫–∏?", "question_for_civilian_8", "–¢–∞–∫", "–ù—ñ"), 
            ("–£ —Ç–µ–±–µ —î –¥–æ–º–∞—à–Ω—ñ —É–ª—é–±–ª–µ–Ω—Ü—ñ?", "question_for_civilian_9", "–¢–∞–∫", "–ù—ñ"), 
            ("–õ—é–±–∏—à –ø–æ–¥–æ—Ä–æ–∂—ñ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ñ?", "question_for_civilian_10", "–¢–∞–∫", "–ù—ñ"),
            ("–õ—ñ–∫–∞—Ä", "doctor", "1", "2"),
            ("–¶—ñ—î—ó –≥—Ä–∏ —Ç–∏ - –õ—ñ–∫–∞—Ä!\n–†–æ–±–∏ –≤—Å–µ, —â–æ–± –≤—Ä—è—Ç—É–≤–∞—Ç–∏ —è–∫–æ–º–æ–≥–∞ –±—ñ–ª—å—à–µ –º–∏—Ä–Ω–∏—Ö –ª—é–¥–µ–π.", "doctor_text", "1", "2"),
            ("–ê–ª—å –ö–∞–ø–æ–Ω–µ", "all_capone", "1", "2"),
            ("–¶—ñ—î—ó –≥—Ä–∏ —Ç–∏ - –ê–ª—å –ö–∞–ø–æ–Ω–µ!\n–†–æ–±–∏ –≤—Å–µ, —â–æ–± —Ç–≤–æ—è —Å—ñ–º`—è –æ—Ç—Ä–∏–º–∞–ª–∞ –ø–µ—Ä–µ–º–æ–≥—É, –Ω–∞–¥ —Ü–∏–º–∏ –Ω—ñ–∫—á–µ–º–Ω–∏–º–∏ –º–∏—Ä–Ω–∏–º–∏ –∂–∏—Ç–µ–ª—è–º–∏.", "all_capone_text", "1", "2"),
            ("–¶—ñ—î—ó –≥—Ä–∏ —Ç–∏ - –ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å!\n–†–æ–±–∏ –≤—Å–µ, —â–æ–± –∑–Ω–∏—â–∏—Ç–∏ –ø—ñ–¥—Å—Ç—É–ø–Ω–µ —É–≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –ê–ª—å –ö–∞–ø–æ–Ω–µ.", "civilian_text", "1", "2"),
            ("–ú–∏—Ä–Ω–∏–π –ñ–∏—Ç–µ–ª—å", "civilian", "1", "2")]

    for text, column, answer1, answer2 in list:
        cursor.execute(f"UPDATE admin_panel SET {column} = %s WHERE creator_id = %s AND group_id = %s", (text, callback.from_user.id, chat_id))
        conn.commit()

    await callback.message.edit_text("–°–∫–∏–Ω—É—Ç–æ –≤—Å–µ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∑–º—ñ–Ω!")